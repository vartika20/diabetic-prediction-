# -*- coding: utf-8 -*-
"""diabetic prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e3DHfkSwuxSXAvEgXQIBaHuBVJ3tn4vu
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler 
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

pd.read_csv?

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

x = diabetes_dataset.drop(columns='Outcome',axis=1)
y = diabetes_dataset['Outcome']

print(x)

print(y)

scaler = StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

print(standardized_data)

x = standardized_data
y = diabetes_dataset['Outcome']

print(x)
print(y)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(x_train,y_train)

"""model evalution

"""

x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print(training_data_accuracy)

"""using test data

"""

x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction,y_test)

print(test_data_accuracy)

"""predictive system

"""

input_data = (5,166,72,19,175,25.8,0.587,51)
a = np.asarray(input_data)
a_reshape = a.reshape(1,-1)
std_data = scaler.transform(a_reshape)
print(std_data)
prediction = classifier.predict(std_data)
print(prediction)
if(prediction[0]==0):
  print('person is not diabetic')
else:
  print('person is diabetic')

